// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  AGENT
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  BUG
  FEATURE
  BILLING
  GENERAL
  SUPPORT
  ACCOUNT
  PERFORMANCE
  SECURITY
}

model User {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  role            Role             @default(CUSTOMER)
  createdTickets  Ticket[]         @relation("createdBy")
  assignedTickets Ticket[]         @relation("assignedTo")
  Comment         Comment[]
  Attachment      Attachment[]
  Refresh_Tokens  Refresh_Tokens[]
}

model Ticket {
  id           String         @id @default(uuid())
  title        String
  description  String
  status       TicketStatus   @default(OPEN)
  priority     TicketPriority @default(LOW)
  category     TicketCategory @default(GENERAL)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  customer     User           @relation("createdBy", fields: [customerId], references: [id], onDelete: Cascade)
  agent        User?          @relation("assignedTo", fields: [agentId], references: [id], onDelete: SetNull)
  department   Department?    @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  customerId   String
  agentId      String?
  departmentId String?
  Comment      Comment[]
}

model Department {
  id          String   @id @default(uuid())
  name        String
  description String
  Ticket      Ticket[]
}

model Comment {
  id         String       @id @default(uuid())
  body       String
  ticket     Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticketId   String
  userId     String
  Attachment Attachment[]
}

model Attachment {
  id        String   @id @default(uuid())
  fileUrl   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String
}

model Refresh_Tokens {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
}
