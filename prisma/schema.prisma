generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  AGENT
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  BUG
  FEATURE
  BILLING
  GENERAL
  SUPPORT
  ACCOUNT
  PERFORMANCE
  SECURITY
}

model User {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  role            Role             @default(CUSTOMER)
  createdTickets  Ticket[]         @relation("createdBy")
  assignedTickets Ticket[]         @relation("assignedTo")
  department      Department?      @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  Comment         Comment[]
  Attachment      Attachment[]
  Refresh_Tokens  Refresh_Tokens[]
  Note            Note[]
  departmentId    String?
}

model Ticket {
  id           String          @id @default(uuid())
  title        String
  description  String
  status       TicketStatus?   @default(OPEN)
  priority     TicketPriority? @default(LOW)
  category     TicketCategory? @default(GENERAL)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  customer     User            @relation("createdBy", fields: [customerId], references: [id], onDelete: Cascade)
  agent        User?           @relation("assignedTo", fields: [agentId], references: [id], onDelete: SetNull)
  department   Department?     @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  customerId   String
  agentId      String?
  departmentId String?
  Comment      Comment[]
  Note         Note[]
}

model Department {
  id          String   @id @default(uuid())
  name        String
  description String
  Ticket      Ticket[]
  User        User[]
}

model Comment {
  id         String       @id @default(uuid())
  body       String
  ticket     Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticketId   String
  userId     String?
  createdAt  DateTime     @default(now())
  Attachment Attachment[]
}

model Attachment {
  id        String  @id @default(uuid())
  fileUrl   String
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String?
  commentId String
}

model Refresh_Tokens {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
}

model Note {
  id        String   @id @default(uuid())
  body      String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  ticketId  String
  userId    String?
}

model Ticket_Archive {
  id          String          @id @default(uuid())
  title       String
  description String
  status      TicketStatus?   @default(OPEN)
  priority    TicketPriority? @default(LOW)
  category    TicketCategory? @default(GENERAL)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
